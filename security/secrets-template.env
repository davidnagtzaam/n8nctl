# ============================================================================
# Secrets Management Documentation
# ============================================================================
# Created by: David Nagtzaam - https://davidnagtzaam.com
#
# Best practices for managing secrets in your n8n deployment
# ============================================================================

## Critical Secrets

The following secrets MUST be backed up securely:

1. **N8N_ENCRYPTION_KEY**
   - Location: .env file
   - Purpose: Encrypts n8n credentials
   - ⚠️ CRITICAL: If lost, all credentials are permanently lost
   - Backup to: Password manager, encrypted vault
   - Never commit to git

2. **POSTGRES_PASSWORD**
   - Location: .env file
   - Purpose: Database authentication
   - Backup to: Password manager
   - Change regularly for security

3. **S3_SECRET_ACCESS_KEY**
   - Location: .env file
   - Purpose: Binary storage access
   - Backup to: Password manager
   - Rotate according to provider recommendations

4. **N8N_JWT_SECRET**
   - Location: .env file
   - Purpose: JWT token signing
   - Backup to: Password manager
   - Rotate if compromised

## Secrets Rotation

### When to Rotate Secrets

- Immediately if compromised
- Every 90 days for database passwords
- Every 180 days for encryption keys (with careful migration)
- When team members leave

### How to Rotate N8N_ENCRYPTION_KEY

1. Export all credentials from n8n UI
2. Update N8N_ENCRYPTION_KEY in .env
3. Restart n8n: `docker compose restart`
4. Re-import credentials

### How to Rotate Database Password

1. Create backup: `bash scripts/backup.sh`
2. Connect to database and change password:
   ```sql
   ALTER USER n8n WITH PASSWORD 'new_secure_password';
   ```
3. Update POSTGRES_PASSWORD in .env
4. Restart services: `docker compose restart`

## Secure Storage Options

### 1. Password Managers (Recommended)
- 1Password, Bitwarden, LastPass
- Store .env file as secure note
- Share with authorized team members only

### 2. HashiCorp Vault
- Enterprise secret management
- Automatic rotation
- Audit logging

### 3. AWS Secrets Manager / GCP Secret Manager
- Cloud-native secret management
- Integrated with IAM
- Automatic rotation

### 4. Encrypted Git Repositories (Not Recommended)
- Use git-crypt or git-secret if necessary
- Still inferior to proper secret management
- High risk of accidental exposure

## Emergency Recovery

If you lose N8N_ENCRYPTION_KEY:
1. All credentials are permanently lost
2. Workflows remain intact
3. You must manually re-enter all credentials
4. Update all workflow nodes with new credentials

Prevention is the only solution - BACKUP YOUR ENCRYPTION KEY!

## Security Checklist

- [ ] N8N_ENCRYPTION_KEY backed up in 2+ locations
- [ ] .env file has chmod 600 permissions
- [ ] Secrets stored in password manager
- [ ] Team members have access to shared secrets vault
- [ ] Secrets rotation schedule established
- [ ] Emergency recovery procedures documented
- [ ] .gitignore prevents .env from being committed

## File Permissions

Ensure proper permissions on sensitive files:

```bash
chmod 600 .env                    # Only owner can read/write
chmod 700 scripts/                # Only owner can execute
chmod 600 backups/*.tgz           # Only owner can read backups
```

## Audit and Compliance

For regulated environments:
- Enable audit logging in PostgreSQL
- Enable Traefik access logs
- Set up centralized log aggregation
- Implement secret scanning in CI/CD
- Regular security audits
- Document all secret access

## Additional Resources

- n8n Security Best Practices: https://docs.n8n.io/hosting/security/
- OWASP Secret Management Cheat Sheet
- Created by: David Nagtzaam - https://davidnagtzaam.com
