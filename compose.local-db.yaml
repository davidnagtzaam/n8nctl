# ============================================================================
# Local PostgreSQL Override - Docker Compose
# ============================================================================
# Created by: David Nagtzaam - https://davidnagtzaam.com
#
# This file adds a local PostgreSQL container for development or
# single-server deployments.
#
# Usage:
#   docker compose -f compose.yaml -f compose.local-db.yaml up -d
#
# OR use the Makefile:
#   make up-local
#
# Note: For production, external PostgreSQL is recommended for better
# reliability, automated backups, and point-in-time recovery.
# ============================================================================

version: '3.8'

services:
  # ==========================================================================
  # POSTGRESQL - Local Database
  # ==========================================================================
  postgres:
    image: postgres:16-alpine
    container_name: n8n-postgres
    restart: unless-stopped
    
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-n8n}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB:-n8n}
      - PGDATA=/var/lib/postgresql/data/pgdata
      
      # Performance tuning
      - POSTGRES_INITDB_ARGS=--encoding=UTF8 --locale=en_US.UTF-8
    
    command:
      - postgres
      - -c
      - max_connections=200
      - -c
      - shared_buffers=256MB
      - -c
      - effective_cache_size=1GB
      - -c
      - maintenance_work_mem=64MB
      - -c
      - checkpoint_completion_target=0.9
      - -c
      - wal_buffers=16MB
      - -c
      - default_statistics_target=100
      - -c
      - random_page_cost=1.1
      - -c
      - effective_io_concurrency=200
      - -c
      - work_mem=4MB
      - -c
      - min_wal_size=1GB
      - -c
      - max_wal_size=4GB
    
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/postgres-init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    
    networks:
      - n8n-network
    
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-n8n} -d ${POSTGRES_DB:-n8n}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    
    security_opt:
      - no-new-privileges:true
    
    # Prevent accidental external exposure
    ports:
      - "127.0.0.1:5432:5432"
    
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 256M

  # Update n8n-web dependency to wait for postgres
  n8n-web:
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  # Update n8n-worker dependency to wait for postgres
  n8n-worker:
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

# ==========================================================================
# VOLUMES
# ==========================================================================
volumes:
  postgres-data:
    name: n8n-postgres-data
