#!/usr/bin/env bash
# ============================================================================
# n8n Production Deployment - CLI Control Tool (n8nctl)
# ============================================================================
# Created by: David Nagtzaam - https://davidnagtzaam.com
#
# Convenient CLI wrapper for common n8n operations
# ============================================================================

set -euo pipefail

# Load shared UI library
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "$SCRIPT_DIR/../lib/lib-ui.sh"

PROJECT_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"

print_help() {
    if $USE_GUM; then
        gum style \
            --foreground 212 \
            --border-foreground 57 \
            --border rounded \
            --align center \
            --width 70 \
            --margin "1 0" \
            --padding "1 2" \
            --bold \
            "n8nctl - n8n Control Tool"
        
        echo ""
        gum style --foreground 6 --bold "Usage:"
        echo "  n8nctl <command> [options]"
        echo ""
        
        gum style --foreground 6 --bold "Setup & Installation:"
        echo "  $(gum style --foreground 2)init$(gum style --foreground 7)                Interactive setup wizard"
        echo "  $(gum style --foreground 2)preflight$(gum style --foreground 7)           Check system requirements"
        echo ""
        gum style --foreground 6 --bold "Service Management:"
        echo "  $(gum style --foreground 2)start$(gum style --foreground 7)               Start all services"
        echo "  $(gum style --foreground 2)stop$(gum style --foreground 7)                Stop all services"
        echo "  $(gum style --foreground 2)restart$(gum style --foreground 7)             Restart all services"
        echo "  $(gum style --foreground 2)status$(gum style --foreground 7)              Show service status"
        echo "  $(gum style --foreground 2)scale$(gum style --foreground 7) <count>       Scale workers to <count>"
        echo ""
        gum style --foreground 6 --bold "Logs & Monitoring:"
        echo "  $(gum style --foreground 2)logs$(gum style --foreground 7) [cmd] [svc]   Log management (tail|show|search|errors|export|list)"
        echo "  $(gum style --foreground 2)health$(gum style --foreground 7)              Run health checks"
        echo ""
        gum style --foreground 6 --bold "Operations:"
        echo "  $(gum style --foreground 2)backup$(gum style --foreground 7)              Create backup"
        echo "  $(gum style --foreground 2)restore$(gum style --foreground 7) <file>      Restore from backup"
        echo "  $(gum style --foreground 2)migrate$(gum style --foreground 7)             Safe version migration"
        echo "  $(gum style --foreground 2)upgrade$(gum style --foreground 7)             Upgrade to latest version"
        echo ""
        gum style --foreground 6 --bold "Utilities:"
        echo "  $(gum style --foreground 2)test$(gum style --foreground 7)                Run deployment tests"
        echo "  $(gum style --foreground 2)validate$(gum style --foreground 7)            Validate environment configuration"
        echo "  $(gum style --foreground 2)version$(gum style --foreground 7)             Show n8n version"
        echo "  $(gum style --foreground 2)shell$(gum style --foreground 7) <service>     Open shell in container"
        echo "  $(gum style --foreground 2)exec$(gum style --foreground 7) <svc> <cmd>    Execute command in container"
        echo "  $(gum style --foreground 2)uninstall$(gum style --foreground 7)           Remove n8nctl from system"
        echo "  $(gum style --foreground 2)help$(gum style --foreground 7)                Show this help"
        echo ""
        
        gum style --foreground 6 --bold "Examples:"
        echo "  n8nctl init                      # First-time setup"
        echo "  n8nctl status                    # Check service health"
        echo "  n8nctl logs tail n8n-web         # Follow web logs"
        echo "  n8nctl logs search \"error\"       # Search for errors"
        echo "  n8nctl scale 5                   # Scale to 5 workers"
        echo "  n8nctl backup                    # Create backup"
        echo "  n8nctl restore /tmp/backup.tgz   # Restore from backup"
        echo ""
        
        gum style --foreground 5 "Created by: David Nagtzaam - https://davidnagtzaam.com"
    else
        cat <<EOF
${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}
${CYAN}${BOLD}n8nctl - n8n Control Tool${NC}
${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}

${CYAN}Usage:${NC}
  n8nctl <command> [options]

${CYAN}Setup & Installation:${NC}
  ${GREEN}init${NC}                Interactive setup wizard
  ${GREEN}preflight${NC}           Check system requirements

${CYAN}Service Management:${NC}
  ${GREEN}start${NC}               Start all services
  ${GREEN}stop${NC}                Stop all services
  ${GREEN}restart${NC}             Restart all services
  ${GREEN}status${NC}              Show service status
  ${GREEN}scale${NC} <count>       Scale workers to <count>

${CYAN}Logs & Monitoring:${NC}
  ${GREEN}logs${NC} [cmd] [svc]   Log management (tail|show|search|errors|export|list)
  ${GREEN}health${NC}              Run health checks

${CYAN}Operations:${NC}
  ${GREEN}backup${NC}              Create backup
  ${GREEN}restore${NC} <file>      Restore from backup
  ${GREEN}migrate${NC}             Safe version migration
  ${GREEN}upgrade${NC}             Upgrade to latest version

${CYAN}Utilities:${NC}
  ${GREEN}test${NC}                Run deployment tests
  ${GREEN}validate${NC}            Validate environment configuration
  ${GREEN}version${NC}             Show n8n version
  ${GREEN}shell${NC} <service>     Open shell in container
  ${GREEN}exec${NC} <svc> <cmd>    Execute command in container
  ${GREEN}uninstall${NC}           Remove n8nctl from system
  ${GREEN}help${NC}                Show this help

${CYAN}Examples:${NC}
  n8nctl init                      # First-time setup
  n8nctl status                    # Check service health
  n8nctl logs tail n8n-web         # Follow web logs
  n8nctl logs search "error"       # Search for errors
  n8nctl scale 5                   # Scale to 5 workers
  n8nctl backup                    # Create backup
  n8nctl restore /tmp/backup.tgz   # Restore from backup

${CYAN}Created by:${NC} David Nagtzaam - https://davidnagtzaam.com
EOF
    fi
}

cmd_status() {
    cd "$PROJECT_ROOT"
    print_info "Service Status:"
    docker compose ps
}

cmd_logs() {
    # Enhanced logs command - delegates to logs.sh with full functionality
    bash "$SCRIPT_DIR/logs.sh" "$@"
}

cmd_restart() {
    cd "$PROJECT_ROOT"
    print_info "Restarting services..."
    show_spinner "Restarting containers" \
        docker compose restart
    print_success "Services restarted"
}

cmd_stop() {
    cd "$PROJECT_ROOT"
    print_info "Stopping services..."
    show_spinner "Stopping containers" \
        docker compose down
    print_success "Services stopped"
}

cmd_start() {
    cd "$PROJECT_ROOT"
    print_info "Starting services..."
    
    if docker compose ps 2>/dev/null | grep -q "postgres"; then
        show_spinner "Starting containers" \
            docker compose -f compose.yaml -f compose.local-db.yaml up -d
    else
        show_spinner "Starting containers" \
            docker compose up -d
    fi
    
    print_success "Services started"
}

cmd_upgrade() {
    bash "$SCRIPT_DIR/upgrade.sh"
}

cmd_backup() {
    bash "$SCRIPT_DIR/backup.sh"
}

cmd_restore() {
    local backup_file="${1:-}"
    
    if [[ -z "$backup_file" ]]; then
        print_error "Backup file required"
        echo "Usage: n8nctl restore <backup-file.tgz>"
        exit 1
    fi
    
    bash "$SCRIPT_DIR/restore.sh" "$backup_file"
}

cmd_scale() {
    local count="${1:-}"
    
    if [[ -z "$count" ]]; then
        print_error "Worker count required"
        echo "Usage: n8nctl scale <count>"
        exit 1
    fi
    
    cd "$PROJECT_ROOT"
    print_info "Scaling workers to $count replicas..."
    show_spinner "Scaling workers" \
        docker compose up -d --scale n8n-worker="$count"
    print_success "Scaled to $count workers"
}

cmd_health() {
    bash "$SCRIPT_DIR/healthcheck.sh"
}

cmd_test() {
    bash "$SCRIPT_DIR/test.sh"
}

cmd_validate() {
    bash "$SCRIPT_DIR/validate-env.sh"
}

cmd_migrate() {
    # User should already be root when calling this command
    if [[ $EUID -ne 0 ]]; then
        print_error "The migrate command requires sudo/root privileges"
        echo "Run: sudo n8nctl migrate"
        exit 1
    fi
    bash "$SCRIPT_DIR/migrate.sh"
}

cmd_version() {
    cd "$PROJECT_ROOT"
    if docker compose ps | grep -q "n8n-web"; then
        print_info "n8n Version:"
        docker compose exec -T n8n-web n8n --version
    else
        print_error "n8n-web is not running"
        exit 1
    fi
}

cmd_shell() {
    local service="${1:-n8n-web}"
    
    cd "$PROJECT_ROOT"
    print_info "Opening shell in $service..."
    docker compose exec "$service" sh
}

cmd_exec() {
    local service="${1:-}"

    if [[ -z "$service" ]]; then
        print_error "Service name required"
        echo "Usage: n8nctl exec <service> <command>"
        exit 1
    fi

    shift
    local command=("$@")

    cd "$PROJECT_ROOT"
    docker compose exec "$service" "${command[@]}"
}

cmd_init() {
    # Run the interactive setup wizard
    if [[ $EUID -ne 0 ]]; then
        print_error "The init command requires sudo/root privileges"
        echo "Run: sudo n8nctl init"
        exit 1
    fi
    bash "$SCRIPT_DIR/init.sh" "$@"
}

cmd_preflight() {
    # Run preflight system checks
    if [[ $EUID -ne 0 ]]; then
        print_error "The preflight command requires sudo/root privileges"
        echo "Run: sudo n8nctl preflight"
        exit 1
    fi
    bash "$SCRIPT_DIR/preflight.sh" "$@"
}

cmd_uninstall() {
    # Run uninstallation
    if [[ $EUID -ne 0 ]]; then
        print_error "The uninstall command requires sudo/root privileges"
        echo "Run: sudo n8nctl uninstall"
        exit 1
    fi

    # Determine uninstall script location
    local uninstall_script="$PROJECT_ROOT/uninstall.sh"

    if [[ ! -f "$uninstall_script" ]]; then
        print_error "Uninstall script not found at: $uninstall_script"
        exit 1
    fi

    bash "$uninstall_script" "$@"
}

# Main execution
main() {
    local command="${1:-help}"
    shift || true
    
    case "$command" in
        init)
            cmd_init "$@"
            ;;
        preflight)
            cmd_preflight "$@"
            ;;
        uninstall)
            cmd_uninstall "$@"
            ;;
        status)
            cmd_status "$@"
            ;;
        logs)
            cmd_logs "$@"
            ;;
        restart)
            cmd_restart "$@"
            ;;
        stop)
            cmd_stop "$@"
            ;;
        start)
            cmd_start "$@"
            ;;
        test)
            cmd_test "$@"
            ;;
        validate)
            cmd_validate "$@"
            ;;
        migrate)
            cmd_migrate "$@"
            ;;
        upgrade)
            cmd_upgrade "$@"
            ;;
        backup)
            cmd_backup "$@"
            ;;
        restore)
            cmd_restore "$@"
            ;;
        scale)
            cmd_scale "$@"
            ;;
        health)
            cmd_health "$@"
            ;;
        version)
            cmd_version "$@"
            ;;
        shell)
            cmd_shell "$@"
            ;;
        exec)
            cmd_exec "$@"
            ;;
        help|--help|-h)
            print_help
            ;;
        *)
            echo -e "${RED}[ERROR] Unknown command: $command${NC}"
            echo ""
            print_help
            exit 1
            ;;
    esac
}

main "$@"
